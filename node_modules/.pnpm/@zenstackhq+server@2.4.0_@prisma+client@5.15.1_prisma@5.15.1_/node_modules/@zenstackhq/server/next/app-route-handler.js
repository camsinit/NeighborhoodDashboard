"use strict";
/* eslint-disable @typescript-eslint/no-non-null-assertion */
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = factory;
const server_1 = require("next/server");
const api_1 = require("../api");
const shared_1 = require("../shared");
/**
 * Creates a Next.js 13 "app dir" API route request handler which encapsulates Prisma CRUD operations.
 *
 * @param options Options for initialization
 * @returns An API route request handler
 */
function factory(options) {
    const { modelMeta, zodSchemas } = (0, shared_1.loadAssets)(options);
    const requestHandler = options.handler || (0, api_1.RPCApiHandler)();
    return async (req, context) => {
        const prisma = (await options.getPrisma(req));
        if (!prisma) {
            return server_1.NextResponse.json({ message: 'unable to get prisma from request context' }, { status: 500 });
        }
        const url = new URL(req.url);
        const query = Object.fromEntries(url.searchParams);
        if (!context.params.path) {
            return server_1.NextResponse.json({ message: 'missing path parameter' }, {
                status: 400,
            });
        }
        const path = context.params.path.join('/');
        let requestBody;
        if (req.body) {
            try {
                requestBody = await req.json();
            }
            catch {
                // noop
            }
        }
        try {
            const r = await requestHandler({
                method: req.method,
                path,
                query,
                requestBody,
                prisma,
                modelMeta,
                zodSchemas,
                logger: options.logger,
            });
            return server_1.NextResponse.json(r.body, { status: r.status });
        }
        catch (err) {
            return server_1.NextResponse.json({ message: `An unhandled error occurred: ${err}` }, { status: 500 });
        }
    };
}
//# sourceMappingURL=app-route-handler.js.map