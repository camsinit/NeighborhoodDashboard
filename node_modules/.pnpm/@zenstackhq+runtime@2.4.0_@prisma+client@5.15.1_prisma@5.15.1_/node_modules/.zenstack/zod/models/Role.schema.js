"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleUpdateSchema = exports.RoleUpdateScalarSchema = exports.RoleCreateSchema = exports.RoleCreateScalarSchema = exports.RolePrismaUpdateSchema = exports.RolePrismaCreateSchema = exports.RoleSchema = exports.RoleScalarSchema = void 0;
/* eslint-disable */
const zod_1 = require("zod");
const baseSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
});
const relationSchema = zod_1.z.object({
    user: zod_1.z.record(zod_1.z.unknown()),
});
const fkSchema = zod_1.z.object({
    userId: zod_1.z.string(),
});
/**
 * `Role` schema excluding foreign keys and relations.
 */
exports.RoleScalarSchema = baseSchema;
/**
 * `Role` schema including all fields (scalar, foreign key, and relations) and validations.
 */
exports.RoleSchema = exports.RoleScalarSchema.merge(fkSchema).merge(relationSchema.partial());
/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
exports.RolePrismaCreateSchema = baseSchema.partial().passthrough();
/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
exports.RolePrismaUpdateSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string()
}).partial();
/**
 * `Role` schema for create operations excluding foreign keys and relations.
 */
exports.RoleCreateScalarSchema = baseSchema.partial({
    id: true
});
/**
 * `Role` schema for create operations including scalar fields, foreign key fields, and validations.
 */
exports.RoleCreateSchema = exports.RoleCreateScalarSchema.merge(fkSchema);
/**
 * `Role` schema for update operations excluding foreign keys and relations.
 */
exports.RoleUpdateScalarSchema = baseSchema.partial();
/**
 * `Role` schema for update operations including scalar fields, foreign key fields, and validations.
 */
exports.RoleUpdateSchema = exports.RoleUpdateScalarSchema.merge(fkSchema.partial());
