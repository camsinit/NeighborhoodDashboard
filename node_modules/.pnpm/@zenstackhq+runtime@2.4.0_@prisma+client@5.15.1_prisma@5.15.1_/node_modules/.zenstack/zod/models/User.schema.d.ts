import { z } from 'zod';
/**
 * `User` schema excluding foreign keys and relations.
 */
export declare const UserScalarSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    pictureUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    stripeCustomerId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    password: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    dateCreated: z.ZodDefault<z.ZodDate>;
    dateUpdated: z.ZodDefault<z.ZodDate>;
}, "password">, "strip", z.ZodTypeAny, {
    id: string;
    dateCreated: Date;
    dateUpdated: Date;
    name?: string | null | undefined;
    email?: string | null | undefined;
    pictureUrl?: string | null | undefined;
    stripeCustomerId?: string | null | undefined;
}, {
    id: string;
    name?: string | null | undefined;
    email?: string | null | undefined;
    pictureUrl?: string | null | undefined;
    stripeCustomerId?: string | null | undefined;
    dateCreated?: Date | undefined;
    dateUpdated?: Date | undefined;
}>;
/**
 * `User` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export declare const UserSchema: z.ZodObject<z.objectUtil.extendShape<Omit<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    pictureUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    stripeCustomerId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    password: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    dateCreated: z.ZodDefault<z.ZodDate>;
    dateUpdated: z.ZodDefault<z.ZodDate>;
}, "password">, {
    accounts: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>>;
    sessions: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>>;
    roles: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>>;
    eventsAsCreatedBy: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>>;
    groupsAsCreatedBy: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>>;
    offeringsAsCreatedBy: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>>;
    emergencyInfos: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>>;
    needWants: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>>;
    interests: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>>;
    responses: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>>;
}>, "strip", z.ZodTypeAny, {
    id: string;
    dateCreated: Date;
    dateUpdated: Date;
    accounts?: unknown[] | undefined;
    name?: string | null | undefined;
    email?: string | null | undefined;
    pictureUrl?: string | null | undefined;
    stripeCustomerId?: string | null | undefined;
    sessions?: unknown[] | undefined;
    roles?: unknown[] | undefined;
    eventsAsCreatedBy?: unknown[] | undefined;
    groupsAsCreatedBy?: unknown[] | undefined;
    offeringsAsCreatedBy?: unknown[] | undefined;
    emergencyInfos?: unknown[] | undefined;
    needWants?: unknown[] | undefined;
    interests?: unknown[] | undefined;
    responses?: unknown[] | undefined;
}, {
    id: string;
    accounts?: unknown[] | undefined;
    name?: string | null | undefined;
    email?: string | null | undefined;
    pictureUrl?: string | null | undefined;
    stripeCustomerId?: string | null | undefined;
    dateCreated?: Date | undefined;
    dateUpdated?: Date | undefined;
    sessions?: unknown[] | undefined;
    roles?: unknown[] | undefined;
    eventsAsCreatedBy?: unknown[] | undefined;
    groupsAsCreatedBy?: unknown[] | undefined;
    offeringsAsCreatedBy?: unknown[] | undefined;
    emergencyInfos?: unknown[] | undefined;
    needWants?: unknown[] | undefined;
    interests?: unknown[] | undefined;
    responses?: unknown[] | undefined;
}>;
/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export declare const UserPrismaCreateSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    email: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    pictureUrl: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    stripeCustomerId: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    password: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    dateCreated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
    dateUpdated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    email: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    pictureUrl: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    stripeCustomerId: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    password: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    dateCreated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
    dateUpdated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    email: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    pictureUrl: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    stripeCustomerId: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    password: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    dateCreated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
    dateUpdated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
}, z.ZodTypeAny, "passthrough">>;
/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export declare const UserPrismaUpdateSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    email: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    pictureUrl: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    stripeCustomerId: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    password: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    dateCreated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
    dateUpdated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
}, "strip", z.ZodTypeAny, {
    id?: string | undefined;
    name?: string | null | undefined;
    email?: string | null | undefined;
    pictureUrl?: string | null | undefined;
    stripeCustomerId?: string | null | undefined;
    password?: string | null | undefined;
    dateCreated?: Date | undefined;
    dateUpdated?: Date | undefined;
}, {
    id?: string | undefined;
    name?: string | null | undefined;
    email?: string | null | undefined;
    pictureUrl?: string | null | undefined;
    stripeCustomerId?: string | null | undefined;
    password?: string | null | undefined;
    dateCreated?: Date | undefined;
    dateUpdated?: Date | undefined;
}>;
/**
 * `User` schema for create operations excluding foreign keys and relations.
 */
export declare const UserCreateScalarSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    pictureUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    stripeCustomerId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    password: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    dateCreated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
    dateUpdated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
}, "strip", z.ZodTypeAny, {
    id?: string | undefined;
    name?: string | null | undefined;
    email?: string | null | undefined;
    pictureUrl?: string | null | undefined;
    stripeCustomerId?: string | null | undefined;
    password?: string | null | undefined;
    dateCreated?: Date | undefined;
    dateUpdated?: Date | undefined;
}, {
    id?: string | undefined;
    name?: string | null | undefined;
    email?: string | null | undefined;
    pictureUrl?: string | null | undefined;
    stripeCustomerId?: string | null | undefined;
    password?: string | null | undefined;
    dateCreated?: Date | undefined;
    dateUpdated?: Date | undefined;
}>;
/**
 * `User` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export declare const UserCreateSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    pictureUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    stripeCustomerId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    password: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    dateCreated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
    dateUpdated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
}, "strip", z.ZodTypeAny, {
    id?: string | undefined;
    name?: string | null | undefined;
    email?: string | null | undefined;
    pictureUrl?: string | null | undefined;
    stripeCustomerId?: string | null | undefined;
    password?: string | null | undefined;
    dateCreated?: Date | undefined;
    dateUpdated?: Date | undefined;
}, {
    id?: string | undefined;
    name?: string | null | undefined;
    email?: string | null | undefined;
    pictureUrl?: string | null | undefined;
    stripeCustomerId?: string | null | undefined;
    password?: string | null | undefined;
    dateCreated?: Date | undefined;
    dateUpdated?: Date | undefined;
}>;
/**
 * `User` schema for update operations excluding foreign keys and relations.
 */
export declare const UserUpdateScalarSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    email: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    pictureUrl: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    stripeCustomerId: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    password: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    dateCreated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
    dateUpdated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
}, "strip", z.ZodTypeAny, {
    id?: string | undefined;
    name?: string | null | undefined;
    email?: string | null | undefined;
    pictureUrl?: string | null | undefined;
    stripeCustomerId?: string | null | undefined;
    password?: string | null | undefined;
    dateCreated?: Date | undefined;
    dateUpdated?: Date | undefined;
}, {
    id?: string | undefined;
    name?: string | null | undefined;
    email?: string | null | undefined;
    pictureUrl?: string | null | undefined;
    stripeCustomerId?: string | null | undefined;
    password?: string | null | undefined;
    dateCreated?: Date | undefined;
    dateUpdated?: Date | undefined;
}>;
/**
 * `User` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export declare const UserUpdateSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    email: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    pictureUrl: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    stripeCustomerId: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    password: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    dateCreated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
    dateUpdated: z.ZodOptional<z.ZodDefault<z.ZodDate>>;
}, "strip", z.ZodTypeAny, {
    id?: string | undefined;
    name?: string | null | undefined;
    email?: string | null | undefined;
    pictureUrl?: string | null | undefined;
    stripeCustomerId?: string | null | undefined;
    password?: string | null | undefined;
    dateCreated?: Date | undefined;
    dateUpdated?: Date | undefined;
}, {
    id?: string | undefined;
    name?: string | null | undefined;
    email?: string | null | undefined;
    pictureUrl?: string | null | undefined;
    stripeCustomerId?: string | null | undefined;
    password?: string | null | undefined;
    dateCreated?: Date | undefined;
    dateUpdated?: Date | undefined;
}>;
