import { z } from 'zod';
/**
 * `Account` schema excluding foreign keys and relations.
 */
export declare const AccountScalarSchema: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodString;
    provider: z.ZodString;
    providerAccountId: z.ZodString;
    refresh_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    access_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    expires_at: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    token_type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    scope: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    session_state: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    refresh_token_expires_in: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: string;
    provider: string;
    providerAccountId: string;
    refresh_token?: string | null | undefined;
    access_token?: string | null | undefined;
    expires_at?: number | null | undefined;
    token_type?: string | null | undefined;
    scope?: string | null | undefined;
    id_token?: string | null | undefined;
    session_state?: string | null | undefined;
    refresh_token_expires_in?: number | null | undefined;
}, {
    id: string;
    type: string;
    provider: string;
    providerAccountId: string;
    refresh_token?: string | null | undefined;
    access_token?: string | null | undefined;
    expires_at?: number | null | undefined;
    token_type?: string | null | undefined;
    scope?: string | null | undefined;
    id_token?: string | null | undefined;
    session_state?: string | null | undefined;
    refresh_token_expires_in?: number | null | undefined;
}>;
/**
 * `Account` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export declare const AccountSchema: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    id: z.ZodString;
    type: z.ZodString;
    provider: z.ZodString;
    providerAccountId: z.ZodString;
    refresh_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    access_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    expires_at: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    token_type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    scope: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    session_state: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    refresh_token_expires_in: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, {
    userId: z.ZodString;
}>, {
    user: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}>, "strip", z.ZodTypeAny, {
    id: string;
    userId: string;
    type: string;
    provider: string;
    providerAccountId: string;
    user?: Record<string, unknown> | undefined;
    refresh_token?: string | null | undefined;
    access_token?: string | null | undefined;
    expires_at?: number | null | undefined;
    token_type?: string | null | undefined;
    scope?: string | null | undefined;
    id_token?: string | null | undefined;
    session_state?: string | null | undefined;
    refresh_token_expires_in?: number | null | undefined;
}, {
    id: string;
    userId: string;
    type: string;
    provider: string;
    providerAccountId: string;
    user?: Record<string, unknown> | undefined;
    refresh_token?: string | null | undefined;
    access_token?: string | null | undefined;
    expires_at?: number | null | undefined;
    token_type?: string | null | undefined;
    scope?: string | null | undefined;
    id_token?: string | null | undefined;
    session_state?: string | null | undefined;
    refresh_token_expires_in?: number | null | undefined;
}>;
/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export declare const AccountPrismaCreateSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodString>;
    provider: z.ZodOptional<z.ZodString>;
    providerAccountId: z.ZodOptional<z.ZodString>;
    refresh_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    access_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    expires_at: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    token_type: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    scope: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    id_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    session_state: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    refresh_token_expires_in: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    id: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodString>;
    provider: z.ZodOptional<z.ZodString>;
    providerAccountId: z.ZodOptional<z.ZodString>;
    refresh_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    access_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    expires_at: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    token_type: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    scope: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    id_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    session_state: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    refresh_token_expires_in: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    id: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodString>;
    provider: z.ZodOptional<z.ZodString>;
    providerAccountId: z.ZodOptional<z.ZodString>;
    refresh_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    access_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    expires_at: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    token_type: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    scope: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    id_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    session_state: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    refresh_token_expires_in: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
}, z.ZodTypeAny, "passthrough">>;
/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export declare const AccountPrismaUpdateSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodString>;
    provider: z.ZodOptional<z.ZodString>;
    providerAccountId: z.ZodOptional<z.ZodString>;
    refresh_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    access_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    expires_at: z.ZodOptional<z.ZodUnion<[z.ZodOptional<z.ZodNullable<z.ZodNumber>>, z.ZodRecord<z.ZodString, z.ZodUnknown>]>>;
    token_type: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    scope: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    id_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    session_state: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    refresh_token_expires_in: z.ZodOptional<z.ZodUnion<[z.ZodOptional<z.ZodNullable<z.ZodNumber>>, z.ZodRecord<z.ZodString, z.ZodUnknown>]>>;
}, "strip", z.ZodTypeAny, {
    id?: string | undefined;
    type?: string | undefined;
    provider?: string | undefined;
    providerAccountId?: string | undefined;
    refresh_token?: string | null | undefined;
    access_token?: string | null | undefined;
    expires_at?: number | Record<string, unknown> | null | undefined;
    token_type?: string | null | undefined;
    scope?: string | null | undefined;
    id_token?: string | null | undefined;
    session_state?: string | null | undefined;
    refresh_token_expires_in?: number | Record<string, unknown> | null | undefined;
}, {
    id?: string | undefined;
    type?: string | undefined;
    provider?: string | undefined;
    providerAccountId?: string | undefined;
    refresh_token?: string | null | undefined;
    access_token?: string | null | undefined;
    expires_at?: number | Record<string, unknown> | null | undefined;
    token_type?: string | null | undefined;
    scope?: string | null | undefined;
    id_token?: string | null | undefined;
    session_state?: string | null | undefined;
    refresh_token_expires_in?: number | Record<string, unknown> | null | undefined;
}>;
/**
 * `Account` schema for create operations excluding foreign keys and relations.
 */
export declare const AccountCreateScalarSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    type: z.ZodString;
    provider: z.ZodString;
    providerAccountId: z.ZodString;
    refresh_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    access_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    expires_at: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    token_type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    scope: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    session_state: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    refresh_token_expires_in: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    type: string;
    provider: string;
    providerAccountId: string;
    id?: string | undefined;
    refresh_token?: string | null | undefined;
    access_token?: string | null | undefined;
    expires_at?: number | null | undefined;
    token_type?: string | null | undefined;
    scope?: string | null | undefined;
    id_token?: string | null | undefined;
    session_state?: string | null | undefined;
    refresh_token_expires_in?: number | null | undefined;
}, {
    type: string;
    provider: string;
    providerAccountId: string;
    id?: string | undefined;
    refresh_token?: string | null | undefined;
    access_token?: string | null | undefined;
    expires_at?: number | null | undefined;
    token_type?: string | null | undefined;
    scope?: string | null | undefined;
    id_token?: string | null | undefined;
    session_state?: string | null | undefined;
    refresh_token_expires_in?: number | null | undefined;
}>;
/**
 * `Account` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export declare const AccountCreateSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodOptional<z.ZodString>;
    type: z.ZodString;
    provider: z.ZodString;
    providerAccountId: z.ZodString;
    refresh_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    access_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    expires_at: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    token_type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    scope: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    id_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    session_state: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    refresh_token_expires_in: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, {
    userId: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    userId: string;
    type: string;
    provider: string;
    providerAccountId: string;
    id?: string | undefined;
    refresh_token?: string | null | undefined;
    access_token?: string | null | undefined;
    expires_at?: number | null | undefined;
    token_type?: string | null | undefined;
    scope?: string | null | undefined;
    id_token?: string | null | undefined;
    session_state?: string | null | undefined;
    refresh_token_expires_in?: number | null | undefined;
}, {
    userId: string;
    type: string;
    provider: string;
    providerAccountId: string;
    id?: string | undefined;
    refresh_token?: string | null | undefined;
    access_token?: string | null | undefined;
    expires_at?: number | null | undefined;
    token_type?: string | null | undefined;
    scope?: string | null | undefined;
    id_token?: string | null | undefined;
    session_state?: string | null | undefined;
    refresh_token_expires_in?: number | null | undefined;
}>;
/**
 * `Account` schema for update operations excluding foreign keys and relations.
 */
export declare const AccountUpdateScalarSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodString>;
    provider: z.ZodOptional<z.ZodString>;
    providerAccountId: z.ZodOptional<z.ZodString>;
    refresh_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    access_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    expires_at: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    token_type: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    scope: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    id_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    session_state: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    refresh_token_expires_in: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
}, "strip", z.ZodTypeAny, {
    id?: string | undefined;
    type?: string | undefined;
    provider?: string | undefined;
    providerAccountId?: string | undefined;
    refresh_token?: string | null | undefined;
    access_token?: string | null | undefined;
    expires_at?: number | null | undefined;
    token_type?: string | null | undefined;
    scope?: string | null | undefined;
    id_token?: string | null | undefined;
    session_state?: string | null | undefined;
    refresh_token_expires_in?: number | null | undefined;
}, {
    id?: string | undefined;
    type?: string | undefined;
    provider?: string | undefined;
    providerAccountId?: string | undefined;
    refresh_token?: string | null | undefined;
    access_token?: string | null | undefined;
    expires_at?: number | null | undefined;
    token_type?: string | null | undefined;
    scope?: string | null | undefined;
    id_token?: string | null | undefined;
    session_state?: string | null | undefined;
    refresh_token_expires_in?: number | null | undefined;
}>;
/**
 * `Account` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export declare const AccountUpdateSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodString>;
    provider: z.ZodOptional<z.ZodString>;
    providerAccountId: z.ZodOptional<z.ZodString>;
    refresh_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    access_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    expires_at: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    token_type: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    scope: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    id_token: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    session_state: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodString>>>;
    refresh_token_expires_in: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
}, {
    userId: z.ZodOptional<z.ZodString>;
}>, "strip", z.ZodTypeAny, {
    id?: string | undefined;
    userId?: string | undefined;
    type?: string | undefined;
    provider?: string | undefined;
    providerAccountId?: string | undefined;
    refresh_token?: string | null | undefined;
    access_token?: string | null | undefined;
    expires_at?: number | null | undefined;
    token_type?: string | null | undefined;
    scope?: string | null | undefined;
    id_token?: string | null | undefined;
    session_state?: string | null | undefined;
    refresh_token_expires_in?: number | null | undefined;
}, {
    id?: string | undefined;
    userId?: string | undefined;
    type?: string | undefined;
    provider?: string | undefined;
    providerAccountId?: string | undefined;
    refresh_token?: string | null | undefined;
    access_token?: string | null | undefined;
    expires_at?: number | null | undefined;
    token_type?: string | null | undefined;
    scope?: string | null | undefined;
    id_token?: string | null | undefined;
    session_state?: string | null | undefined;
    refresh_token_expires_in?: number | null | undefined;
}>;
