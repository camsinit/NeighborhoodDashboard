import { z } from 'zod';
/**
 * `Role` schema excluding foreign keys and relations.
 */
export declare const RoleScalarSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
}, {
    id: string;
    name: string;
}>;
/**
 * `Role` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export declare const RoleSchema: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    id: z.ZodString;
    name: z.ZodString;
}, {
    userId: z.ZodString;
}>, {
    user: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}>, "strip", z.ZodTypeAny, {
    id: string;
    userId: string;
    name: string;
    user?: Record<string, unknown> | undefined;
}, {
    id: string;
    userId: string;
    name: string;
    user?: Record<string, unknown> | undefined;
}>;
/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export declare const RolePrismaCreateSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">>;
/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export declare const RolePrismaUpdateSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id?: string | undefined;
    name?: string | undefined;
}, {
    id?: string | undefined;
    name?: string | undefined;
}>;
/**
 * `Role` schema for create operations excluding foreign keys and relations.
 */
export declare const RoleCreateScalarSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    id?: string | undefined;
}, {
    name: string;
    id?: string | undefined;
}>;
/**
 * `Role` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export declare const RoleCreateSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
}, {
    userId: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    userId: string;
    name: string;
    id?: string | undefined;
}, {
    userId: string;
    name: string;
    id?: string | undefined;
}>;
/**
 * `Role` schema for update operations excluding foreign keys and relations.
 */
export declare const RoleUpdateScalarSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id?: string | undefined;
    name?: string | undefined;
}, {
    id?: string | undefined;
    name?: string | undefined;
}>;
/**
 * `Role` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export declare const RoleUpdateSchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
}, {
    userId: z.ZodOptional<z.ZodString>;
}>, "strip", z.ZodTypeAny, {
    id?: string | undefined;
    userId?: string | undefined;
    name?: string | undefined;
}, {
    id?: string | undefined;
    userId?: string | undefined;
    name?: string | undefined;
}>;
