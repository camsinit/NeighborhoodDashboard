"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventUpdateSchema = exports.EventUpdateScalarSchema = exports.EventCreateSchema = exports.EventCreateScalarSchema = exports.EventPrismaUpdateSchema = exports.EventPrismaCreateSchema = exports.EventSchema = exports.EventScalarSchema = void 0;
/* eslint-disable */
const zod_1 = require("zod");
const baseSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    description: zod_1.z.string().nullish(),
    date: zod_1.z.string().nullish(),
    location: zod_1.z.string().nullish(),
    dateCreated: zod_1.z.coerce.date().default(() => new Date()),
    dateUpdated: zod_1.z.coerce.date().default(() => new Date()),
});
const relationSchema = zod_1.z.object({
    createdBy: zod_1.z.record(zod_1.z.unknown()).optional(),
    responses: zod_1.z.array(zod_1.z.unknown()).optional(),
});
const fkSchema = zod_1.z.object({
    createdById: zod_1.z.string().nullish(),
});
/**
 * `Event` schema excluding foreign keys and relations.
 */
exports.EventScalarSchema = baseSchema;
/**
 * `Event` schema including all fields (scalar, foreign key, and relations) and validations.
 */
exports.EventSchema = exports.EventScalarSchema.merge(fkSchema).merge(relationSchema.partial());
/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
exports.EventPrismaCreateSchema = baseSchema.partial().passthrough();
/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
exports.EventPrismaUpdateSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    description: zod_1.z.string().nullish(),
    date: zod_1.z.string().nullish(),
    location: zod_1.z.string().nullish(),
    dateCreated: zod_1.z.coerce.date().default(() => new Date()),
    dateUpdated: zod_1.z.coerce.date().default(() => new Date())
}).partial();
/**
 * `Event` schema for create operations excluding foreign keys and relations.
 */
exports.EventCreateScalarSchema = baseSchema.partial({
    id: true, dateCreated: true, dateUpdated: true
});
/**
 * `Event` schema for create operations including scalar fields, foreign key fields, and validations.
 */
exports.EventCreateSchema = exports.EventCreateScalarSchema.merge(fkSchema);
/**
 * `Event` schema for update operations excluding foreign keys and relations.
 */
exports.EventUpdateScalarSchema = baseSchema.partial();
/**
 * `Event` schema for update operations including scalar fields, foreign key fields, and validations.
 */
exports.EventUpdateSchema = exports.EventUpdateScalarSchema.merge(fkSchema.partial());
