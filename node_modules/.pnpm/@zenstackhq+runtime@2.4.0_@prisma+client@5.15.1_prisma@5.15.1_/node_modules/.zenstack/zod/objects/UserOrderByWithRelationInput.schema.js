"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserOrderByWithRelationInputObjectSchema = void 0;
/* eslint-disable */
const zod_1 = require("zod");
const SortOrder_schema_1 = require("../enums/SortOrder.schema");
const SortOrderInput_schema_1 = require("./SortOrderInput.schema");
const AccountOrderByRelationAggregateInput_schema_1 = require("./AccountOrderByRelationAggregateInput.schema");
const SessionOrderByRelationAggregateInput_schema_1 = require("./SessionOrderByRelationAggregateInput.schema");
const RoleOrderByRelationAggregateInput_schema_1 = require("./RoleOrderByRelationAggregateInput.schema");
const EventOrderByRelationAggregateInput_schema_1 = require("./EventOrderByRelationAggregateInput.schema");
const GroupOrderByRelationAggregateInput_schema_1 = require("./GroupOrderByRelationAggregateInput.schema");
const OfferingOrderByRelationAggregateInput_schema_1 = require("./OfferingOrderByRelationAggregateInput.schema");
const EmergencyInfoOrderByRelationAggregateInput_schema_1 = require("./EmergencyInfoOrderByRelationAggregateInput.schema");
const NeedWantOrderByRelationAggregateInput_schema_1 = require("./NeedWantOrderByRelationAggregateInput.schema");
const InterestOrderByRelationAggregateInput_schema_1 = require("./InterestOrderByRelationAggregateInput.schema");
const ResponseOrderByRelationAggregateInput_schema_1 = require("./ResponseOrderByRelationAggregateInput.schema");
exports.UserOrderByWithRelationInputObjectSchema = zod_1.z.object({
    id: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), name: zod_1.z.union([zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema),
        zod_1.z.lazy(() => SortOrderInput_schema_1.SortOrderInputObjectSchema)]).optional(), email: zod_1.z.union([zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema),
        zod_1.z.lazy(() => SortOrderInput_schema_1.SortOrderInputObjectSchema)]).optional(), pictureUrl: zod_1.z.union([zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema),
        zod_1.z.lazy(() => SortOrderInput_schema_1.SortOrderInputObjectSchema)]).optional(), stripeCustomerId: zod_1.z.union([zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema),
        zod_1.z.lazy(() => SortOrderInput_schema_1.SortOrderInputObjectSchema)]).optional(), password: zod_1.z.union([zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema),
        zod_1.z.lazy(() => SortOrderInput_schema_1.SortOrderInputObjectSchema)]).optional(), dateCreated: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), dateUpdated: zod_1.z.lazy(() => SortOrder_schema_1.SortOrderSchema).optional(), accounts: zod_1.z.lazy(() => AccountOrderByRelationAggregateInput_schema_1.AccountOrderByRelationAggregateInputObjectSchema).optional(), sessions: zod_1.z.lazy(() => SessionOrderByRelationAggregateInput_schema_1.SessionOrderByRelationAggregateInputObjectSchema).optional(), roles: zod_1.z.lazy(() => RoleOrderByRelationAggregateInput_schema_1.RoleOrderByRelationAggregateInputObjectSchema).optional(), eventsAsCreatedBy: zod_1.z.lazy(() => EventOrderByRelationAggregateInput_schema_1.EventOrderByRelationAggregateInputObjectSchema).optional(), groupsAsCreatedBy: zod_1.z.lazy(() => GroupOrderByRelationAggregateInput_schema_1.GroupOrderByRelationAggregateInputObjectSchema).optional(), offeringsAsCreatedBy: zod_1.z.lazy(() => OfferingOrderByRelationAggregateInput_schema_1.OfferingOrderByRelationAggregateInputObjectSchema).optional(), emergencyInfos: zod_1.z.lazy(() => EmergencyInfoOrderByRelationAggregateInput_schema_1.EmergencyInfoOrderByRelationAggregateInputObjectSchema).optional(), needWants: zod_1.z.lazy(() => NeedWantOrderByRelationAggregateInput_schema_1.NeedWantOrderByRelationAggregateInputObjectSchema).optional(), interests: zod_1.z.lazy(() => InterestOrderByRelationAggregateInput_schema_1.InterestOrderByRelationAggregateInputObjectSchema).optional(), responses: zod_1.z.lazy(() => ResponseOrderByRelationAggregateInput_schema_1.ResponseOrderByRelationAggregateInputObjectSchema).optional()
}).strict();
