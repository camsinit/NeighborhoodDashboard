"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NeedWantInputSchema = void 0;
/* eslint-disable */
const zod_1 = require("zod");
;
const NeedWantSelect_schema_1 = require("../objects/NeedWantSelect.schema");
const NeedWantInclude_schema_1 = require("../objects/NeedWantInclude.schema");
const NeedWantWhereUniqueInput_schema_1 = require("../objects/NeedWantWhereUniqueInput.schema");
const NeedWantWhereInput_schema_1 = require("../objects/NeedWantWhereInput.schema");
const NeedWantOrderByWithRelationInput_schema_1 = require("../objects/NeedWantOrderByWithRelationInput.schema");
const NeedWantScalarFieldEnum_schema_1 = require("../enums/NeedWantScalarFieldEnum.schema");
const NeedWantCreateInput_schema_1 = require("../objects/NeedWantCreateInput.schema");
const NeedWantUncheckedCreateInput_schema_1 = require("../objects/NeedWantUncheckedCreateInput.schema");
const NeedWantCreateManyInput_schema_1 = require("../objects/NeedWantCreateManyInput.schema");
const NeedWantUpdateInput_schema_1 = require("../objects/NeedWantUpdateInput.schema");
const NeedWantUncheckedUpdateInput_schema_1 = require("../objects/NeedWantUncheckedUpdateInput.schema");
const NeedWantUpdateManyMutationInput_schema_1 = require("../objects/NeedWantUpdateManyMutationInput.schema");
const NeedWantUncheckedUpdateManyInput_schema_1 = require("../objects/NeedWantUncheckedUpdateManyInput.schema");
const NeedWantCountAggregateInput_schema_1 = require("../objects/NeedWantCountAggregateInput.schema");
const NeedWantMinAggregateInput_schema_1 = require("../objects/NeedWantMinAggregateInput.schema");
const NeedWantMaxAggregateInput_schema_1 = require("../objects/NeedWantMaxAggregateInput.schema");
const NeedWantOrderByWithAggregationInput_schema_1 = require("../objects/NeedWantOrderByWithAggregationInput.schema");
const NeedWantScalarWhereWithAggregatesInput_schema_1 = require("../objects/NeedWantScalarWhereWithAggregatesInput.schema");
exports.NeedWantInputSchema = {
    findUnique: zod_1.z.object({ select: zod_1.z.lazy(() => NeedWantSelect_schema_1.NeedWantSelectObjectSchema.optional()), include: zod_1.z.lazy(() => NeedWantInclude_schema_1.NeedWantIncludeObjectSchema.optional()), where: NeedWantWhereUniqueInput_schema_1.NeedWantWhereUniqueInputObjectSchema }), findFirst: zod_1.z.object({ select: zod_1.z.lazy(() => NeedWantSelect_schema_1.NeedWantSelectObjectSchema.optional()), include: zod_1.z.lazy(() => NeedWantInclude_schema_1.NeedWantIncludeObjectSchema.optional()), where: NeedWantWhereInput_schema_1.NeedWantWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([NeedWantOrderByWithRelationInput_schema_1.NeedWantOrderByWithRelationInputObjectSchema, NeedWantOrderByWithRelationInput_schema_1.NeedWantOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: NeedWantWhereUniqueInput_schema_1.NeedWantWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), distinct: zod_1.z.array(NeedWantScalarFieldEnum_schema_1.NeedWantScalarFieldEnumSchema).optional() }), findMany: zod_1.z.object({ select: zod_1.z.lazy(() => NeedWantSelect_schema_1.NeedWantSelectObjectSchema.optional()), include: zod_1.z.lazy(() => NeedWantInclude_schema_1.NeedWantIncludeObjectSchema.optional()), where: NeedWantWhereInput_schema_1.NeedWantWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([NeedWantOrderByWithRelationInput_schema_1.NeedWantOrderByWithRelationInputObjectSchema, NeedWantOrderByWithRelationInput_schema_1.NeedWantOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: NeedWantWhereUniqueInput_schema_1.NeedWantWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), distinct: zod_1.z.array(NeedWantScalarFieldEnum_schema_1.NeedWantScalarFieldEnumSchema).optional() }), create: zod_1.z.object({ select: zod_1.z.lazy(() => NeedWantSelect_schema_1.NeedWantSelectObjectSchema.optional()), include: zod_1.z.lazy(() => NeedWantInclude_schema_1.NeedWantIncludeObjectSchema.optional()), data: zod_1.z.union([NeedWantCreateInput_schema_1.NeedWantCreateInputObjectSchema, NeedWantUncheckedCreateInput_schema_1.NeedWantUncheckedCreateInputObjectSchema]) }), createMany: zod_1.z.object({ data: zod_1.z.union([NeedWantCreateManyInput_schema_1.NeedWantCreateManyInputObjectSchema, zod_1.z.array(NeedWantCreateManyInput_schema_1.NeedWantCreateManyInputObjectSchema)]), skipDuplicates: zod_1.z.boolean().optional() }), 'delete': zod_1.z.object({ select: zod_1.z.lazy(() => NeedWantSelect_schema_1.NeedWantSelectObjectSchema.optional()), include: zod_1.z.lazy(() => NeedWantInclude_schema_1.NeedWantIncludeObjectSchema.optional()), where: NeedWantWhereUniqueInput_schema_1.NeedWantWhereUniqueInputObjectSchema }), deleteMany: zod_1.z.object({ where: NeedWantWhereInput_schema_1.NeedWantWhereInputObjectSchema.optional() }), update: zod_1.z.object({ select: zod_1.z.lazy(() => NeedWantSelect_schema_1.NeedWantSelectObjectSchema.optional()), include: zod_1.z.lazy(() => NeedWantInclude_schema_1.NeedWantIncludeObjectSchema.optional()), data: zod_1.z.union([NeedWantUpdateInput_schema_1.NeedWantUpdateInputObjectSchema, NeedWantUncheckedUpdateInput_schema_1.NeedWantUncheckedUpdateInputObjectSchema]), where: NeedWantWhereUniqueInput_schema_1.NeedWantWhereUniqueInputObjectSchema }), updateMany: zod_1.z.object({ data: zod_1.z.union([NeedWantUpdateManyMutationInput_schema_1.NeedWantUpdateManyMutationInputObjectSchema, NeedWantUncheckedUpdateManyInput_schema_1.NeedWantUncheckedUpdateManyInputObjectSchema]), where: NeedWantWhereInput_schema_1.NeedWantWhereInputObjectSchema.optional() }), upsert: zod_1.z.object({ select: zod_1.z.lazy(() => NeedWantSelect_schema_1.NeedWantSelectObjectSchema.optional()), include: zod_1.z.lazy(() => NeedWantInclude_schema_1.NeedWantIncludeObjectSchema.optional()), where: NeedWantWhereUniqueInput_schema_1.NeedWantWhereUniqueInputObjectSchema, create: zod_1.z.union([NeedWantCreateInput_schema_1.NeedWantCreateInputObjectSchema, NeedWantUncheckedCreateInput_schema_1.NeedWantUncheckedCreateInputObjectSchema]), update: zod_1.z.union([NeedWantUpdateInput_schema_1.NeedWantUpdateInputObjectSchema, NeedWantUncheckedUpdateInput_schema_1.NeedWantUncheckedUpdateInputObjectSchema]) }), aggregate: zod_1.z.object({ where: NeedWantWhereInput_schema_1.NeedWantWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([NeedWantOrderByWithRelationInput_schema_1.NeedWantOrderByWithRelationInputObjectSchema, NeedWantOrderByWithRelationInput_schema_1.NeedWantOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: NeedWantWhereUniqueInput_schema_1.NeedWantWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), _count: zod_1.z.union([zod_1.z.literal(true), NeedWantCountAggregateInput_schema_1.NeedWantCountAggregateInputObjectSchema]).optional(), _min: NeedWantMinAggregateInput_schema_1.NeedWantMinAggregateInputObjectSchema.optional(), _max: NeedWantMaxAggregateInput_schema_1.NeedWantMaxAggregateInputObjectSchema.optional() }), groupBy: zod_1.z.object({ where: NeedWantWhereInput_schema_1.NeedWantWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([NeedWantOrderByWithAggregationInput_schema_1.NeedWantOrderByWithAggregationInputObjectSchema, NeedWantOrderByWithAggregationInput_schema_1.NeedWantOrderByWithAggregationInputObjectSchema.array()]).optional(), having: NeedWantScalarWhereWithAggregatesInput_schema_1.NeedWantScalarWhereWithAggregatesInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), by: zod_1.z.array(NeedWantScalarFieldEnum_schema_1.NeedWantScalarFieldEnumSchema), _count: zod_1.z.union([zod_1.z.literal(true), NeedWantCountAggregateInput_schema_1.NeedWantCountAggregateInputObjectSchema]).optional(), _min: NeedWantMinAggregateInput_schema_1.NeedWantMinAggregateInputObjectSchema.optional(), _max: NeedWantMaxAggregateInput_schema_1.NeedWantMaxAggregateInputObjectSchema.optional() }), count: zod_1.z.object({ where: NeedWantWhereInput_schema_1.NeedWantWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([NeedWantOrderByWithRelationInput_schema_1.NeedWantOrderByWithRelationInputObjectSchema, NeedWantOrderByWithRelationInput_schema_1.NeedWantOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: NeedWantWhereUniqueInput_schema_1.NeedWantWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), distinct: zod_1.z.array(NeedWantScalarFieldEnum_schema_1.NeedWantScalarFieldEnumSchema).optional(), select: zod_1.z.union([zod_1.z.literal(true), NeedWantCountAggregateInput_schema_1.NeedWantCountAggregateInputObjectSchema]).optional() })
};
