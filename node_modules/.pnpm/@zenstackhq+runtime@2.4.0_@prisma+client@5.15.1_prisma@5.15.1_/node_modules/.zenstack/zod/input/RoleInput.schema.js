"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleInputSchema = void 0;
/* eslint-disable */
const zod_1 = require("zod");
;
const RoleSelect_schema_1 = require("../objects/RoleSelect.schema");
const RoleInclude_schema_1 = require("../objects/RoleInclude.schema");
const RoleWhereUniqueInput_schema_1 = require("../objects/RoleWhereUniqueInput.schema");
const RoleWhereInput_schema_1 = require("../objects/RoleWhereInput.schema");
const RoleOrderByWithRelationInput_schema_1 = require("../objects/RoleOrderByWithRelationInput.schema");
const RoleScalarFieldEnum_schema_1 = require("../enums/RoleScalarFieldEnum.schema");
const RoleCreateInput_schema_1 = require("../objects/RoleCreateInput.schema");
const RoleUncheckedCreateInput_schema_1 = require("../objects/RoleUncheckedCreateInput.schema");
const RoleCreateManyInput_schema_1 = require("../objects/RoleCreateManyInput.schema");
const RoleUpdateInput_schema_1 = require("../objects/RoleUpdateInput.schema");
const RoleUncheckedUpdateInput_schema_1 = require("../objects/RoleUncheckedUpdateInput.schema");
const RoleUpdateManyMutationInput_schema_1 = require("../objects/RoleUpdateManyMutationInput.schema");
const RoleUncheckedUpdateManyInput_schema_1 = require("../objects/RoleUncheckedUpdateManyInput.schema");
const RoleCountAggregateInput_schema_1 = require("../objects/RoleCountAggregateInput.schema");
const RoleMinAggregateInput_schema_1 = require("../objects/RoleMinAggregateInput.schema");
const RoleMaxAggregateInput_schema_1 = require("../objects/RoleMaxAggregateInput.schema");
const RoleOrderByWithAggregationInput_schema_1 = require("../objects/RoleOrderByWithAggregationInput.schema");
const RoleScalarWhereWithAggregatesInput_schema_1 = require("../objects/RoleScalarWhereWithAggregatesInput.schema");
exports.RoleInputSchema = {
    findUnique: zod_1.z.object({ select: zod_1.z.lazy(() => RoleSelect_schema_1.RoleSelectObjectSchema.optional()), include: zod_1.z.lazy(() => RoleInclude_schema_1.RoleIncludeObjectSchema.optional()), where: RoleWhereUniqueInput_schema_1.RoleWhereUniqueInputObjectSchema }), findFirst: zod_1.z.object({ select: zod_1.z.lazy(() => RoleSelect_schema_1.RoleSelectObjectSchema.optional()), include: zod_1.z.lazy(() => RoleInclude_schema_1.RoleIncludeObjectSchema.optional()), where: RoleWhereInput_schema_1.RoleWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([RoleOrderByWithRelationInput_schema_1.RoleOrderByWithRelationInputObjectSchema, RoleOrderByWithRelationInput_schema_1.RoleOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: RoleWhereUniqueInput_schema_1.RoleWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), distinct: zod_1.z.array(RoleScalarFieldEnum_schema_1.RoleScalarFieldEnumSchema).optional() }), findMany: zod_1.z.object({ select: zod_1.z.lazy(() => RoleSelect_schema_1.RoleSelectObjectSchema.optional()), include: zod_1.z.lazy(() => RoleInclude_schema_1.RoleIncludeObjectSchema.optional()), where: RoleWhereInput_schema_1.RoleWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([RoleOrderByWithRelationInput_schema_1.RoleOrderByWithRelationInputObjectSchema, RoleOrderByWithRelationInput_schema_1.RoleOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: RoleWhereUniqueInput_schema_1.RoleWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), distinct: zod_1.z.array(RoleScalarFieldEnum_schema_1.RoleScalarFieldEnumSchema).optional() }), create: zod_1.z.object({ select: zod_1.z.lazy(() => RoleSelect_schema_1.RoleSelectObjectSchema.optional()), include: zod_1.z.lazy(() => RoleInclude_schema_1.RoleIncludeObjectSchema.optional()), data: zod_1.z.union([RoleCreateInput_schema_1.RoleCreateInputObjectSchema, RoleUncheckedCreateInput_schema_1.RoleUncheckedCreateInputObjectSchema]) }), createMany: zod_1.z.object({ data: zod_1.z.union([RoleCreateManyInput_schema_1.RoleCreateManyInputObjectSchema, zod_1.z.array(RoleCreateManyInput_schema_1.RoleCreateManyInputObjectSchema)]), skipDuplicates: zod_1.z.boolean().optional() }), 'delete': zod_1.z.object({ select: zod_1.z.lazy(() => RoleSelect_schema_1.RoleSelectObjectSchema.optional()), include: zod_1.z.lazy(() => RoleInclude_schema_1.RoleIncludeObjectSchema.optional()), where: RoleWhereUniqueInput_schema_1.RoleWhereUniqueInputObjectSchema }), deleteMany: zod_1.z.object({ where: RoleWhereInput_schema_1.RoleWhereInputObjectSchema.optional() }), update: zod_1.z.object({ select: zod_1.z.lazy(() => RoleSelect_schema_1.RoleSelectObjectSchema.optional()), include: zod_1.z.lazy(() => RoleInclude_schema_1.RoleIncludeObjectSchema.optional()), data: zod_1.z.union([RoleUpdateInput_schema_1.RoleUpdateInputObjectSchema, RoleUncheckedUpdateInput_schema_1.RoleUncheckedUpdateInputObjectSchema]), where: RoleWhereUniqueInput_schema_1.RoleWhereUniqueInputObjectSchema }), updateMany: zod_1.z.object({ data: zod_1.z.union([RoleUpdateManyMutationInput_schema_1.RoleUpdateManyMutationInputObjectSchema, RoleUncheckedUpdateManyInput_schema_1.RoleUncheckedUpdateManyInputObjectSchema]), where: RoleWhereInput_schema_1.RoleWhereInputObjectSchema.optional() }), upsert: zod_1.z.object({ select: zod_1.z.lazy(() => RoleSelect_schema_1.RoleSelectObjectSchema.optional()), include: zod_1.z.lazy(() => RoleInclude_schema_1.RoleIncludeObjectSchema.optional()), where: RoleWhereUniqueInput_schema_1.RoleWhereUniqueInputObjectSchema, create: zod_1.z.union([RoleCreateInput_schema_1.RoleCreateInputObjectSchema, RoleUncheckedCreateInput_schema_1.RoleUncheckedCreateInputObjectSchema]), update: zod_1.z.union([RoleUpdateInput_schema_1.RoleUpdateInputObjectSchema, RoleUncheckedUpdateInput_schema_1.RoleUncheckedUpdateInputObjectSchema]) }), aggregate: zod_1.z.object({ where: RoleWhereInput_schema_1.RoleWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([RoleOrderByWithRelationInput_schema_1.RoleOrderByWithRelationInputObjectSchema, RoleOrderByWithRelationInput_schema_1.RoleOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: RoleWhereUniqueInput_schema_1.RoleWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), _count: zod_1.z.union([zod_1.z.literal(true), RoleCountAggregateInput_schema_1.RoleCountAggregateInputObjectSchema]).optional(), _min: RoleMinAggregateInput_schema_1.RoleMinAggregateInputObjectSchema.optional(), _max: RoleMaxAggregateInput_schema_1.RoleMaxAggregateInputObjectSchema.optional() }), groupBy: zod_1.z.object({ where: RoleWhereInput_schema_1.RoleWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([RoleOrderByWithAggregationInput_schema_1.RoleOrderByWithAggregationInputObjectSchema, RoleOrderByWithAggregationInput_schema_1.RoleOrderByWithAggregationInputObjectSchema.array()]).optional(), having: RoleScalarWhereWithAggregatesInput_schema_1.RoleScalarWhereWithAggregatesInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), by: zod_1.z.array(RoleScalarFieldEnum_schema_1.RoleScalarFieldEnumSchema), _count: zod_1.z.union([zod_1.z.literal(true), RoleCountAggregateInput_schema_1.RoleCountAggregateInputObjectSchema]).optional(), _min: RoleMinAggregateInput_schema_1.RoleMinAggregateInputObjectSchema.optional(), _max: RoleMaxAggregateInput_schema_1.RoleMaxAggregateInputObjectSchema.optional() }), count: zod_1.z.object({ where: RoleWhereInput_schema_1.RoleWhereInputObjectSchema.optional(), orderBy: zod_1.z.union([RoleOrderByWithRelationInput_schema_1.RoleOrderByWithRelationInputObjectSchema, RoleOrderByWithRelationInput_schema_1.RoleOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: RoleWhereUniqueInput_schema_1.RoleWhereUniqueInputObjectSchema.optional(), take: zod_1.z.number().optional(), skip: zod_1.z.number().optional(), distinct: zod_1.z.array(RoleScalarFieldEnum_schema_1.RoleScalarFieldEnumSchema).optional(), select: zod_1.z.union([zod_1.z.literal(true), RoleCountAggregateInput_schema_1.RoleCountAggregateInputObjectSchema]).optional() })
};
