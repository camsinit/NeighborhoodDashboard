"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const policy = {
    policy: {
        account: {
            modelLevel: {
                read: {
                    guard: Account_read,
                },
                create: {
                    guard: Account_create,
                },
                update: {
                    guard: Account_update,
                },
                postUpdate: {
                    guard: Account_postUpdate,
                },
                delete: {
                    guard: Account_delete,
                }
            },
            fieldLevel: {
                read: {},
                update: {},
            },
        },
        user: {
            modelLevel: {
                read: {
                    guard: User_read,
                },
                create: {
                    guard: User_create,
                },
                update: {
                    guard: User_update,
                },
                postUpdate: {
                    guard: User_postUpdate,
                },
                delete: {
                    guard: User_delete,
                }
            },
            fieldLevel: {
                read: {},
                update: {},
            },
        },
        session: {
            modelLevel: {
                read: {
                    guard: Session_read,
                },
                create: {
                    guard: Session_create,
                },
                update: {
                    guard: Session_update,
                },
                postUpdate: {
                    guard: Session_postUpdate,
                },
                delete: {
                    guard: Session_delete,
                }
            },
            fieldLevel: {
                read: {},
                update: {},
            },
        },
        role: {
            modelLevel: {
                read: {
                    guard: Role_read,
                },
                create: {
                    guard: Role_create, inputChecker: Role_create_input,
                },
                update: {
                    guard: Role_update,
                },
                postUpdate: {
                    guard: Role_postUpdate,
                },
                delete: {
                    guard: Role_delete,
                }
            },
            fieldLevel: {
                read: {},
                update: {},
            },
        },
        event: {
            modelLevel: {
                read: {
                    guard: Event_read,
                },
                create: {
                    guard: Event_create, inputChecker: Event_create_input,
                },
                update: {
                    guard: Event_update,
                },
                postUpdate: {
                    guard: Event_postUpdate,
                },
                delete: {
                    guard: Event_delete,
                }
            },
            fieldLevel: {
                read: {},
                update: {},
            },
        },
        response: {
            modelLevel: {
                read: {
                    guard: Response_read,
                },
                create: {
                    guard: Response_create, inputChecker: Response_create_input,
                },
                update: {
                    guard: Response_update,
                },
                postUpdate: {
                    guard: Response_postUpdate,
                },
                delete: {
                    guard: Response_delete,
                }
            },
            fieldLevel: {
                read: {},
                update: {},
            },
        },
        group: {
            modelLevel: {
                read: {
                    guard: Group_read,
                },
                create: {
                    guard: Group_create, inputChecker: Group_create_input,
                },
                update: {
                    guard: Group_update,
                },
                postUpdate: {
                    guard: Group_postUpdate,
                },
                delete: {
                    guard: Group_delete,
                }
            },
            fieldLevel: {
                read: {},
                update: {},
            },
        },
        offering: {
            modelLevel: {
                read: {
                    guard: Offering_read,
                },
                create: {
                    guard: Offering_create, inputChecker: Offering_create_input,
                },
                update: {
                    guard: Offering_update,
                },
                postUpdate: {
                    guard: Offering_postUpdate,
                },
                delete: {
                    guard: Offering_delete,
                }
            },
            fieldLevel: {
                read: {},
                update: {},
            },
        },
        emergencyInfo: {
            modelLevel: {
                read: {
                    guard: EmergencyInfo_read,
                },
                create: {
                    guard: EmergencyInfo_create, inputChecker: EmergencyInfo_create_input,
                },
                update: {
                    guard: EmergencyInfo_update,
                },
                postUpdate: {
                    guard: EmergencyInfo_postUpdate,
                },
                delete: {
                    guard: EmergencyInfo_delete,
                }
            },
            fieldLevel: {
                read: {},
                update: {},
            },
        },
        needWant: {
            modelLevel: {
                read: {
                    guard: NeedWant_read,
                },
                create: {
                    guard: NeedWant_create, inputChecker: NeedWant_create_input,
                },
                update: {
                    guard: NeedWant_update,
                },
                postUpdate: {
                    guard: NeedWant_postUpdate,
                },
                delete: {
                    guard: NeedWant_delete,
                }
            },
            fieldLevel: {
                read: {},
                update: {},
            },
        },
        interest: {
            modelLevel: {
                read: {
                    guard: Interest_read,
                },
                create: {
                    guard: Interest_create, inputChecker: Interest_create_input,
                },
                update: {
                    guard: Interest_update,
                },
                postUpdate: {
                    guard: Interest_postUpdate,
                },
                delete: {
                    guard: Interest_delete,
                }
            },
            fieldLevel: {
                read: {},
                update: {},
            },
        },
    },
    validation: {
        account: {
            hasValidation: false
        },
        user: {
            hasValidation: false
        },
        session: {
            hasValidation: false
        },
        role: {
            hasValidation: false
        },
        event: {
            hasValidation: false
        },
        response: {
            hasValidation: false
        },
        group: {
            hasValidation: false
        },
        offering: {
            hasValidation: false
        },
        emergencyInfo: {
            hasValidation: false
        },
        needWant: {
            hasValidation: false
        },
        interest: {
            hasValidation: false
        },
    },
    authSelector: { "id": true, "roles": { "select": { "id": true } } },
};
function Account_read(context, db) {
    var _a, _b, _c;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (((_b = user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : null) == null) ? { OR: [] } : {
        user: {
            id: {
                equals: ((_c = user === null || user === void 0 ? void 0 : user.id) !== null && _c !== void 0 ? _c : null)
            }
        }
    };
}
function $check_Account_read(input, context) {
    var _a, _b;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (((user === null || user === void 0 ? void 0 : user.id) == ((_b = input === null || input === void 0 ? void 0 : input.user) === null || _b === void 0 ? void 0 : _b.id))) {
        return true;
    }
    return false;
}
function Account_create(context, db) {
    var _a, _b, _c;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (((_b = user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : null) == null) ? { OR: [] } : {
        user: {
            id: {
                equals: ((_c = user === null || user === void 0 ? void 0 : user.id) !== null && _c !== void 0 ? _c : null)
            }
        }
    };
}
function $check_Account_create(input, context) {
    var _a, _b;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (((user === null || user === void 0 ? void 0 : user.id) == ((_b = input === null || input === void 0 ? void 0 : input.user) === null || _b === void 0 ? void 0 : _b.id))) {
        return true;
    }
    return false;
}
function Account_update(context, db) {
    var _a, _b, _c;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (((_b = user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : null) == null) ? { OR: [] } : {
        user: {
            id: {
                equals: ((_c = user === null || user === void 0 ? void 0 : user.id) !== null && _c !== void 0 ? _c : null)
            }
        }
    };
}
function $check_Account_update(input, context) {
    var _a, _b;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (((user === null || user === void 0 ? void 0 : user.id) == ((_b = input === null || input === void 0 ? void 0 : input.user) === null || _b === void 0 ? void 0 : _b.id))) {
        return true;
    }
    return false;
}
function Account_postUpdate(context, db) {
    return { AND: [] };
}
function $check_Account_postUpdate(input, context) {
    return true;
}
function Account_delete(context, db) {
    var _a, _b, _c;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (((_b = user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : null) == null) ? { OR: [] } : {
        user: {
            id: {
                equals: ((_c = user === null || user === void 0 ? void 0 : user.id) !== null && _c !== void 0 ? _c : null)
            }
        }
    };
}
function $check_Account_delete(input, context) {
    var _a, _b;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (((user === null || user === void 0 ? void 0 : user.id) == ((_b = input === null || input === void 0 ? void 0 : input.user) === null || _b === void 0 ? void 0 : _b.id))) {
        return true;
    }
    return false;
}
function User_read(context, db) {
    var _a, _b, _c, _d, _e, _f;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return { OR: [(((_b = user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : null) == null) ? { OR: [] } : {
                id: {
                    equals: ((_c = user === null || user === void 0 ? void 0 : user.id) !== null && _c !== void 0 ? _c : null)
                }
            }, ((_f = ((_e = (((_d = user === null || user === void 0 ? void 0 : user.roles) !== null && _d !== void 0 ? _d : null))) === null || _e === void 0 ? void 0 : _e.some((_item) => ((_item === null || _item === void 0 ? void 0 : _item.name) == 'admin')))) !== null && _f !== void 0 ? _f : false) ? { AND: [] } : { OR: [] }] };
}
function $check_User_read(input, context) {
    var _a, _b, _c;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (((user === null || user === void 0 ? void 0 : user.id) == (input === null || input === void 0 ? void 0 : input.id))) {
        return true;
    }
    if (((_c = ((_b = (user === null || user === void 0 ? void 0 : user.roles)) === null || _b === void 0 ? void 0 : _b.some((_item) => ((_item === null || _item === void 0 ? void 0 : _item.name) == 'admin')))) !== null && _c !== void 0 ? _c : false)) {
        return true;
    }
    return false;
}
function User_create(context, db) {
    return { AND: [] };
}
function $check_User_create(input, context) {
    var _a, _b, _c;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (((user === null || user === void 0 ? void 0 : user.id) == (input === null || input === void 0 ? void 0 : input.id))) {
        return true;
    }
    if (((_c = ((_b = (user === null || user === void 0 ? void 0 : user.roles)) === null || _b === void 0 ? void 0 : _b.some((_item) => ((_item === null || _item === void 0 ? void 0 : _item.name) == 'admin')))) !== null && _c !== void 0 ? _c : false)) {
        return true;
    }
    if (true) {
        return true;
    }
    return false;
}
function User_update(context, db) {
    var _a, _b, _c, _d, _e, _f;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return { OR: [(((_b = user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : null) == null) ? { OR: [] } : {
                id: {
                    equals: ((_c = user === null || user === void 0 ? void 0 : user.id) !== null && _c !== void 0 ? _c : null)
                }
            }, ((_f = ((_e = (((_d = user === null || user === void 0 ? void 0 : user.roles) !== null && _d !== void 0 ? _d : null))) === null || _e === void 0 ? void 0 : _e.some((_item) => ((_item === null || _item === void 0 ? void 0 : _item.name) == 'admin')))) !== null && _f !== void 0 ? _f : false) ? { AND: [] } : { OR: [] }] };
}
function $check_User_update(input, context) {
    var _a, _b, _c;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (((user === null || user === void 0 ? void 0 : user.id) == (input === null || input === void 0 ? void 0 : input.id))) {
        return true;
    }
    if (((_c = ((_b = (user === null || user === void 0 ? void 0 : user.roles)) === null || _b === void 0 ? void 0 : _b.some((_item) => ((_item === null || _item === void 0 ? void 0 : _item.name) == 'admin')))) !== null && _c !== void 0 ? _c : false)) {
        return true;
    }
    return false;
}
function User_postUpdate(context, db) {
    return { AND: [] };
}
function $check_User_postUpdate(input, context) {
    return true;
}
function User_delete(context, db) {
    var _a, _b, _c, _d, _e, _f;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return { OR: [(((_b = user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : null) == null) ? { OR: [] } : {
                id: {
                    equals: ((_c = user === null || user === void 0 ? void 0 : user.id) !== null && _c !== void 0 ? _c : null)
                }
            }, ((_f = ((_e = (((_d = user === null || user === void 0 ? void 0 : user.roles) !== null && _d !== void 0 ? _d : null))) === null || _e === void 0 ? void 0 : _e.some((_item) => ((_item === null || _item === void 0 ? void 0 : _item.name) == 'admin')))) !== null && _f !== void 0 ? _f : false) ? { AND: [] } : { OR: [] }] };
}
function $check_User_delete(input, context) {
    var _a, _b, _c;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (((user === null || user === void 0 ? void 0 : user.id) == (input === null || input === void 0 ? void 0 : input.id))) {
        return true;
    }
    if (((_c = ((_b = (user === null || user === void 0 ? void 0 : user.roles)) === null || _b === void 0 ? void 0 : _b.some((_item) => ((_item === null || _item === void 0 ? void 0 : _item.name) == 'admin')))) !== null && _c !== void 0 ? _c : false)) {
        return true;
    }
    return false;
}
function Session_read(context, db) {
    var _a, _b, _c;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (((_b = user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : null) == null) ? { OR: [] } : {
        user: {
            id: {
                equals: ((_c = user === null || user === void 0 ? void 0 : user.id) !== null && _c !== void 0 ? _c : null)
            }
        }
    };
}
function $check_Session_read(input, context) {
    var _a, _b;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (((user === null || user === void 0 ? void 0 : user.id) == ((_b = input === null || input === void 0 ? void 0 : input.user) === null || _b === void 0 ? void 0 : _b.id))) {
        return true;
    }
    return false;
}
function Session_create(context, db) {
    var _a, _b, _c;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (((_b = user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : null) == null) ? { OR: [] } : {
        user: {
            id: {
                equals: ((_c = user === null || user === void 0 ? void 0 : user.id) !== null && _c !== void 0 ? _c : null)
            }
        }
    };
}
function $check_Session_create(input, context) {
    var _a, _b;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (((user === null || user === void 0 ? void 0 : user.id) == ((_b = input === null || input === void 0 ? void 0 : input.user) === null || _b === void 0 ? void 0 : _b.id))) {
        return true;
    }
    return false;
}
function Session_update(context, db) {
    var _a, _b, _c;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (((_b = user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : null) == null) ? { OR: [] } : {
        user: {
            id: {
                equals: ((_c = user === null || user === void 0 ? void 0 : user.id) !== null && _c !== void 0 ? _c : null)
            }
        }
    };
}
function $check_Session_update(input, context) {
    var _a, _b;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (((user === null || user === void 0 ? void 0 : user.id) == ((_b = input === null || input === void 0 ? void 0 : input.user) === null || _b === void 0 ? void 0 : _b.id))) {
        return true;
    }
    return false;
}
function Session_postUpdate(context, db) {
    return { AND: [] };
}
function $check_Session_postUpdate(input, context) {
    return true;
}
function Session_delete(context, db) {
    var _a, _b, _c;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (((_b = user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : null) == null) ? { OR: [] } : {
        user: {
            id: {
                equals: ((_c = user === null || user === void 0 ? void 0 : user.id) !== null && _c !== void 0 ? _c : null)
            }
        }
    };
}
function $check_Session_delete(input, context) {
    var _a, _b;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (((user === null || user === void 0 ? void 0 : user.id) == ((_b = input === null || input === void 0 ? void 0 : input.user) === null || _b === void 0 ? void 0 : _b.id))) {
        return true;
    }
    return false;
}
function Role_read(context, db) {
    var _a, _b, _c;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (((_b = user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : null) == null) ? { OR: [] } : {
        userId: {
            equals: ((_c = user === null || user === void 0 ? void 0 : user.id) !== null && _c !== void 0 ? _c : null)
        }
    };
}
function $check_Role_read(input, context) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (((user === null || user === void 0 ? void 0 : user.id) == (input === null || input === void 0 ? void 0 : input.userId))) {
        return true;
    }
    return false;
}
function Role_create(context, db) {
    return {
        name: {
            not: {
                equals: 'admin'
            }
        }
    };
}
function $check_Role_create(input, context) {
    if (((input === null || input === void 0 ? void 0 : input.name) != 'admin')) {
        return true;
    }
    return false;
}
function Role_create_input(input, context) {
    return ((input === null || input === void 0 ? void 0 : input.name) != 'admin');
}
function Role_update(context, db) {
    return { AND: [] };
}
function $check_Role_update(input, context) {
    return false;
}
function Role_postUpdate(context, db) {
    return {
        name: {
            not: {
                equals: 'admin'
            }
        }
    };
}
function $check_Role_postUpdate(input, context) {
    if ((input.name != 'admin')) {
        return true;
    }
    return true;
}
function Role_delete(context, db) {
    var _a, _b, _c;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (((_b = user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : null) == null) ? { OR: [] } : {
        userId: {
            equals: ((_c = user === null || user === void 0 ? void 0 : user.id) !== null && _c !== void 0 ? _c : null)
        }
    };
}
function $check_Role_delete(input, context) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (((user === null || user === void 0 ? void 0 : user.id) == (input === null || input === void 0 ? void 0 : input.userId))) {
        return true;
    }
    return false;
}
function Event_read(context, db) {
    return { AND: [] };
}
function $check_Event_read(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Event_create(context, db) {
    return { AND: [] };
}
function $check_Event_create(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Event_create_input(input, context) {
    return true;
}
function Event_update(context, db) {
    return { AND: [] };
}
function $check_Event_update(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Event_postUpdate(context, db) {
    return { AND: [] };
}
function $check_Event_postUpdate(input, context) {
    return true;
}
function Event_delete(context, db) {
    return { AND: [] };
}
function $check_Event_delete(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Response_read(context, db) {
    return { AND: [] };
}
function $check_Response_read(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Response_create(context, db) {
    return { AND: [] };
}
function $check_Response_create(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Response_create_input(input, context) {
    return true;
}
function Response_update(context, db) {
    return { AND: [] };
}
function $check_Response_update(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Response_postUpdate(context, db) {
    return { AND: [] };
}
function $check_Response_postUpdate(input, context) {
    return true;
}
function Response_delete(context, db) {
    return { AND: [] };
}
function $check_Response_delete(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Group_read(context, db) {
    return { AND: [] };
}
function $check_Group_read(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Group_create(context, db) {
    return { AND: [] };
}
function $check_Group_create(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Group_create_input(input, context) {
    return true;
}
function Group_update(context, db) {
    return { AND: [] };
}
function $check_Group_update(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Group_postUpdate(context, db) {
    return { AND: [] };
}
function $check_Group_postUpdate(input, context) {
    return true;
}
function Group_delete(context, db) {
    return { AND: [] };
}
function $check_Group_delete(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Offering_read(context, db) {
    return { AND: [] };
}
function $check_Offering_read(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Offering_create(context, db) {
    return { AND: [] };
}
function $check_Offering_create(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Offering_create_input(input, context) {
    return true;
}
function Offering_update(context, db) {
    return { AND: [] };
}
function $check_Offering_update(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Offering_postUpdate(context, db) {
    return { AND: [] };
}
function $check_Offering_postUpdate(input, context) {
    return true;
}
function Offering_delete(context, db) {
    return { AND: [] };
}
function $check_Offering_delete(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function EmergencyInfo_read(context, db) {
    return { AND: [] };
}
function $check_EmergencyInfo_read(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function EmergencyInfo_create(context, db) {
    return { AND: [] };
}
function $check_EmergencyInfo_create(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function EmergencyInfo_create_input(input, context) {
    return true;
}
function EmergencyInfo_update(context, db) {
    return { AND: [] };
}
function $check_EmergencyInfo_update(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function EmergencyInfo_postUpdate(context, db) {
    return { AND: [] };
}
function $check_EmergencyInfo_postUpdate(input, context) {
    return true;
}
function EmergencyInfo_delete(context, db) {
    return { AND: [] };
}
function $check_EmergencyInfo_delete(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function NeedWant_read(context, db) {
    return { AND: [] };
}
function $check_NeedWant_read(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function NeedWant_create(context, db) {
    return { AND: [] };
}
function $check_NeedWant_create(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function NeedWant_create_input(input, context) {
    return true;
}
function NeedWant_update(context, db) {
    return { AND: [] };
}
function $check_NeedWant_update(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function NeedWant_postUpdate(context, db) {
    return { AND: [] };
}
function $check_NeedWant_postUpdate(input, context) {
    return true;
}
function NeedWant_delete(context, db) {
    return { AND: [] };
}
function $check_NeedWant_delete(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Interest_read(context, db) {
    return { AND: [] };
}
function $check_Interest_read(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Interest_create(context, db) {
    return { AND: [] };
}
function $check_Interest_create(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Interest_create_input(input, context) {
    return true;
}
function Interest_update(context, db) {
    return { AND: [] };
}
function $check_Interest_update(input, context) {
    if (true) {
        return true;
    }
    return false;
}
function Interest_postUpdate(context, db) {
    return { AND: [] };
}
function $check_Interest_postUpdate(input, context) {
    return true;
}
function Interest_delete(context, db) {
    return { AND: [] };
}
function $check_Interest_delete(input, context) {
    if (true) {
        return true;
    }
    return false;
}
exports.default = policy;
