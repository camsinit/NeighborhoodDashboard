//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('create', true)
model User {
  id                   String          @id() @default(uuid())
  name                 String?
  email                String?         @unique()
  pictureUrl           String?
  stripeCustomerId     String?
  /// @password
  /// @omit
  password             String?
  dateCreated          DateTime        @default(now())
  dateUpdated          DateTime        @default(now()) @updatedAt()
  accounts             Account[]
  sessions             Session[]
  roles                Role[]
  eventsAsCreatedBy    Event[]         @relation("createdBy")
  groupsAsCreatedBy    Group[]         @relation("createdBy")
  offeringsAsCreatedBy Offering[]      @relation("createdBy")
  emergencyInfos       EmergencyInfo[] @relation("user")
  needWants            NeedWant[]      @relation("user")
  interests            Interest[]      @relation("user")
  responses            Response[]      @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('read', auth().id == this.userId)
/// @@allow('delete', auth().id == this.userId)
/// @@allow('create', name != 'admin')
/// @@allow('update', future().name != 'admin')
model Role {
  id     String @id() @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

/// @@allow('all', true)
model Event {
  id          String     @id() @default(uuid())
  name        String
  description String?
  date        String?
  location    String?
  createdById String?
  createdBy   User?      @relation(fields: [createdById], references: [id], name: "createdBy")
  responses   Response[] @relation("event")
  dateCreated DateTime   @default(now())
  dateUpdated DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Response {
  id           String   @id() @default(uuid())
  responseText String?
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], name: "user")
  eventId      String?
  event        Event?   @relation(fields: [eventId], references: [id], name: "event")
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Group {
  id          String   @id() @default(uuid())
  name        String
  description String?
  createdById String?
  createdBy   User?    @relation(fields: [createdById], references: [id], name: "createdBy")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Offering {
  id          String   @id() @default(uuid())
  name        String
  description String?
  createdById String?
  createdBy   User?    @relation(fields: [createdById], references: [id], name: "createdBy")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model EmergencyInfo {
  id                String   @id() @default(uuid())
  contactName       String
  contactPhone      String
  medicalConditions String?
  userId            String?
  user              User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated       DateTime @default(now())
  dateUpdated       DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model NeedWant {
  id          String   @id() @default(uuid())
  description String
  type        String
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Interest {
  id          String   @id() @default(uuid())
  description String
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}
